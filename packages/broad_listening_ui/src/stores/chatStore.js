import { defineStore } from "pinia";

export const useChatStore = defineStore("chat", {
  state: () => ({
    isHighlighted: false,
    currentQuestion: "",
    conversations: [],
    currentListId: 1,
    selectedConversationId: null, // null means "new chat"
    shouldFocusInput: false,
    conversationsByList: {
      1: [
        // Vibe coding
        {
          id: 1,
          question: "What music do developers prefer while coding?",
          answer:
            "Based on the tweets, developers favor lo-fi beats, synthwave, and atmospheric music that creates an immersive coding environment. The aesthetic experience is as important as the functionality.",
        },
        {
          id: 2,
          question: "What coding environments are trending?",
          answer:
            "Retro terminal emulators with green text on black backgrounds, mood-based code editors that sync with Spotify, and cyberpunk-themed development setups are popular among vibe coders.",
        },
      ],
      2: [
        // LLM releases
        {
          id: 3,
          question: "Which LLM has the largest context window?",
          answer:
            "According to recent releases, GPT-4.5 Turbo supports 200K context window, while Claude 3.5 Sonnet can maintain context across 1M+ tokens, making it ideal for long-form content analysis.",
        },
        {
          id: 4,
          question: "How is open source competing with proprietary models?",
          answer:
            "Meta's Code Llama 3 70B now beats GPT-4 on HumanEval benchmarks, showing that open source models are rapidly catching up to proprietary ones in specialized tasks like code generation.",
        },
      ],
      3: [
        // RAG
        {
          id: 5,
          question: "What are the latest RAG accuracy improvements?",
          answer:
            "New research combining RAG with knowledge graphs achieves 94% accuracy on complex multi-hop questions. Hybrid approaches using vector + keyword search are showing significant performance gains.",
        },
        {
          id: 6,
          question: "Which tools make RAG development easier?",
          answer:
            "ChromaDB + LangChain integration allows developers to build knowledge base chatbots in under 100 lines of code, making RAG implementation much more accessible.",
        },
      ],
      4: [
        // Frontier AI lab capabilities
        {
          id: 7,
          question: "What breakthrough capabilities are emerging?",
          answer:
            "OpenAI o1 shows emergent reasoning in mathematics and coding, while DeepMind's AlphaCode 3 solves competitive programming at human expert levels. Multi-agent systems are becoming the next frontier.",
        },
        {
          id: 8,
          question: "How close are we to human-level AI?",
          answer:
            "New scaling laws suggest we're approaching human-level performance across most cognitive tasks. The capability explosion is accelerating, with models showing unprecedented reasoning abilities.",
        },
      ],
    },
    isLoading: false,
  }),

  getters: {
    selectedConversation: (state) => {
      if (!state.selectedConversationId) return null;
      return state.conversations.find(
        (c) => c.id === state.selectedConversationId,
      );
    },
  },

  actions: {
    setHighlighted(highlighted) {
      this.isHighlighted = highlighted;
    },

    setCurrentQuestion(question) {
      this.currentQuestion = question;
    },

    async askQuestion(question) {
      if (!question.trim()) return;

      // Create conversation with question immediately
      const newConversation = {
        id: Date.now(),
        question,
        answer: null, // No answer yet
      };

      // Add to the list-specific storage, and conversations will reference it
      if (!this.conversationsByList[this.currentListId]) {
        this.conversationsByList[this.currentListId] = [];
      }
      this.conversationsByList[this.currentListId].unshift(newConversation);
      // Update conversations to reflect the current list
      this.conversations = this.conversationsByList[this.currentListId];

      // Auto-select the new conversation to show it in the chat area
      this.selectedConversationId = newConversation.id;

      this.currentQuestion = "";
      this.isLoading = true;

      // Mock API call - replace with real API later
      const mockAnswer = await new Promise((resolve) => {
        setTimeout(() => {
          resolve(
            `Based on the current content, here's an AI-generated response to "${question}". This is a mock response that would normally be generated by analyzing the tweets and articles in the selected list.`,
          );
        }, 1500);
      });

      // Update the existing conversation with the answer
      newConversation.answer = mockAnswer;
      this.isLoading = false;
    },

    selectConversation(conversationId) {
      this.selectedConversationId = conversationId;
      // Don't set currentQuestion when selecting - let the UI handle it
    },

    startNewChat() {
      this.selectedConversationId = null;
      this.currentQuestion = "";
    },

    focusInput() {
      this.shouldFocusInput = true;
    },

    clearFocusInput() {
      this.shouldFocusInput = false;
    },

    updateConversationsForList(listId) {
      this.currentListId = listId;
      this.conversations = this.conversationsByList[listId] || [];
      this.selectedConversationId = null; // Reset to new chat when changing lists
    },

    initializeDefaultConversations() {
      this.conversations = this.conversationsByList[this.currentListId] || [];
    },
  },
});
